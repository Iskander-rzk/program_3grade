name: 'C++ CI'

on:
  push:
    branches:
      - main
      - feature/github_actions

permissions:
  contents: write  # Права на запись содержимого

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
      # Шаг 1: Клонирование репозитория
      - uses: actions/checkout@v3
        with:
          submodules: true

      # Шаг 2: Установка зависимостей
      - name: Install dependencies
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install -y libboost-test-dev
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            brew update
            brew install boost
          fi

      # Шаг 3: Конфигурация проекта
      - name: Configure with CMake
        run: |
          cmake . -DPATCH_VERSION=${{ github.run_number }}

      # Шаг 4: Сборка проекта
      - name: Build the project
        run: |
          cmake --build .

      # Шаг 5: Запуск тестов
      - name: Run tests
        run: |
          cmake --build . --target test

      # Шаг 6: Создание пакета
      - name: Create package
        run: |
          cmake --build . --target package

      # Шаг 7: Загрузка артефактов
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ runner.os }}-artifact
          path: |
            ./helloworld-0.0.${{ github.run_number }}-Linux.deb
            ./helloworld-0.0.${{ github.run_number }}-Darwin.dmg
          if-no-files-found: ignore  # Игнорируем отсутствие файлов для конкретной платформы

  release:
    # Ожидаем завершения сборки на обеих платформах
    needs: build  
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Скачивание артефактов из задачи сборки
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts

      # Шаг 2: Создание релиза
      - name: Create unified release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "release-${{ github.run_number }}"
          release_name: "Release ${{ github.run_number }}"
          draft: false
          prerelease: false

      # Шаг 3: Загрузка артефактов для Linux
      - name: Upload Linux artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/helloworld-0.0.${{ github.run_number }}-Linux.deb
          asset_name: helloworld-0.0.${{ github.run_number }}-Linux.deb
          asset_content_type: application/vnd.debian.binary-package

      # Шаг 4: Загрузка артефактов для macOS
      - name: Upload macOS artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/helloworld-0.0.${{ github.run_number }}-Darwin.dmg
          asset_name: helloworld-0.0.${{ github.run_number }}-Darwin.dmg
          asset_content_type: application/x-apple-diskimage
