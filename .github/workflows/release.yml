name: 'C++ CI'

on:
  push: 
    branches:
      - main 
      - feature/github_actions  

# Глобальные права доступа для всех jobs
permissions:
  contents: write  #

# Определение задач (jobs) в рамках workflow
jobs:
  build:  # Основная задача — сборка проекта
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]  # Матрица для запуска задачи на двух ОС: Ubuntu и macOS
    runs-on: ${{ matrix.os }}  # Выбор ОС из матрицы для текущего запуска

    steps:
      # Клонирование репозитория
      - uses: actions/checkout@v3  
        with:
          submodules: true  # Подключение подмодулей

      # Установка зависимостей на Linux
      - name: Install dependencies on Linux
        if: ${{ runner.os == 'Linux' }}  # Выполняется только на Linux
        run: |
          sudo apt-get update  # Обновление списка пакетов
          sudo apt-get install -y libboost-test-dev  # Установка Boost для тестов

      # Установка зависимостей на macOS
      - name: Install dependencies on macOS
        if: ${{ runner.os == 'macOS' }}  # Выполняется только на macOS
        run: |
          brew update  # Обновление Homebrew
          brew install boost  # Установка Boost

      # Конфигурация проекта с использованием CMake
      - name: Configure with CMake
        run: |
          cmake . -DPATCH_VERSION=${{ github.run_number }}  # Передача номера сборки как PATCH_VERSION

      # Сборка проекта
      - name: Build the project
        run: |
          cmake --build .  # Компиляция проекта

      # Запуск тестов
      - name: Run tests
        run: |
          cmake --build . --target test  # Выполнение тестов

      # Создание пакета
      - name: Create package
        run: |
          cmake --build . --target package  # Создание бинарного пакета (.deb или .dmg)

      # Создание релиза для Linux
      - name: Create Release for Linux
        if: ${{ runner.os == 'Linux' }}  # Выполняется только на Linux
        id: create_release_linux  # Уникальный идентификатор шага
        uses: actions/create-release@v1 
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
        with:
          tag_name: "linux-${{ github.run_number }}"
          release_name: "Release Linux ${{ github.run_number }}"
          draft: false  
          prerelease: false 

      # Загрузка пакета релиза для Linux
      - name: Upload Release Asset (Linux)
        if: ${{ runner.os == 'Linux' }}  # Выполняется только на Linux
        uses: actions/upload-release-asset@v1  
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
        with:
          upload_url: ${{ steps.create_release_linux.outputs.upload_url }}  
          asset_path: ./helloworld-0.0.${{ github.run_number }}-Linux.deb 
          asset_name: helloworld-0.0.${{ github.run_number }}-Linux.deb  
          asset_content_type: application/vnd.debian.binary-package  

      # Создание релиза для macOS
      - name: Create Release for macOS
        if: ${{ runner.os == 'macOS' }}  # Выполняется только на macOS
        id: create_release_macos  
        uses: actions/create-release@v1  
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
        with:
          tag_name: "macos-${{ github.run_number }}" 
          release_name: "Release macOS ${{ github.run_number }}" 
          draft: false 
          prerelease: false  

      # Загрузка пакета релиза для macOS
      - name: Upload Release Asset (macOS)
        if: ${{ runner.os == 'macOS' }}  # Выполняется только на macOS
        uses: actions/upload-release-asset@v1  
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
        with:
          upload_url: ${{ steps.create_release_macos.outputs.upload_url }}  
          asset_path: ./helloworld-0.0.${{ github.run_number }}-Darwin.dmg  
          asset_name: helloworld-0.0.${{ github.run_number }}-Darwin.dmg  
          asset_content_type: application/x-apple-diskimage 
